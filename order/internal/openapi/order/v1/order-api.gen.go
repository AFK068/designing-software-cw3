// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ApiErrorResponse defines model for ApiErrorResponse.
type ApiErrorResponse struct {
	Code    *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// OrderResponse defines model for OrderResponse.
type OrderResponse struct {
	Amount      *int64              `json:"amount,omitempty"`
	Description *string             `json:"description,omitempty"`
	OrderId     *openapi_types.UUID `json:"order_id,omitempty"`
	Status      *string             `json:"status,omitempty"`
	UserId      *openapi_types.UUID `json:"user_id,omitempty"`
}

// OrderStatusResponse defines model for OrderStatusResponse.
type OrderStatusResponse struct {
	OrderId *openapi_types.UUID `json:"order_id,omitempty"`
	Status  *string             `json:"status,omitempty"`
}

// PostOrderJSONBody defines parameters for PostOrder.
type PostOrderJSONBody struct {
	Amount      *int64              `json:"amount,omitempty"`
	Description *string             `json:"description,omitempty"`
	UserId      *openapi_types.UUID `json:"user_id,omitempty"`
}

// GetOrdersParams defines parameters for GetOrders.
type GetOrdersParams struct {
	UserId openapi_types.UUID `form:"user_id" json:"user_id"`
}

// PostOrderJSONRequestBody defines body for PostOrder for application/json ContentType.
type PostOrderJSONRequestBody PostOrderJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new order
	// (POST /order)
	PostOrder(ctx echo.Context) error
	// Get order status
	// (GET /order/{order_id}/status)
	GetOrderOrderIdStatus(ctx echo.Context, orderId openapi_types.UUID) error
	// Get list of orders for user
	// (GET /orders)
	GetOrders(ctx echo.Context, params GetOrdersParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostOrder converts echo context to params.
func (w *ServerInterfaceWrapper) PostOrder(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostOrder(ctx)
	return err
}

// GetOrderOrderIdStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrderOrderIdStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "order_id" -------------
	var orderId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "order_id", ctx.Param("order_id"), &orderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOrderOrderIdStatus(ctx, orderId)
	return err
}

// GetOrders converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrdersParams
	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOrders(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/order", wrapper.PostOrder)
	router.GET(baseURL+"/order/:order_id/status", wrapper.GetOrderOrderIdStatus)
	router.GET(baseURL+"/orders", wrapper.GetOrders)

}
