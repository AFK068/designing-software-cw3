// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// AccountBalanceResponse defines model for AccountBalanceResponse.
type AccountBalanceResponse struct {
	Balance *string             `json:"balance,omitempty"`
	UserId  *openapi_types.UUID `json:"user_id,omitempty"`
}

// ApiErrorResponse defines model for ApiErrorResponse.
type ApiErrorResponse struct {
	Code    *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// PostAccountJSONBody defines parameters for PostAccount.
type PostAccountJSONBody struct {
	UserId *openapi_types.UUID `json:"user_id,omitempty"`
}

// PostAccountUserIdDepositJSONBody defines parameters for PostAccountUserIdDeposit.
type PostAccountUserIdDepositJSONBody struct {
	Amount *int64 `json:"amount,omitempty"`
}

// PostAccountJSONRequestBody defines body for PostAccount for application/json ContentType.
type PostAccountJSONRequestBody PostAccountJSONBody

// PostAccountUserIdDepositJSONRequestBody defines body for PostAccountUserIdDeposit for application/json ContentType.
type PostAccountUserIdDepositJSONRequestBody PostAccountUserIdDepositJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new account
	// (POST /account)
	PostAccount(ctx echo.Context) error
	// Get account balance
	// (GET /account/{user_id}/balance)
	GetAccountUserIdBalance(ctx echo.Context, userId openapi_types.UUID) error
	// Deposit money to account
	// (POST /account/{user_id}/deposit)
	PostAccountUserIdDeposit(ctx echo.Context, userId openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAccount converts echo context to params.
func (w *ServerInterfaceWrapper) PostAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAccount(ctx)
	return err
}

// GetAccountUserIdBalance converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccountUserIdBalance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccountUserIdBalance(ctx, userId)
	return err
}

// PostAccountUserIdDeposit converts echo context to params.
func (w *ServerInterfaceWrapper) PostAccountUserIdDeposit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAccountUserIdDeposit(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/account", wrapper.PostAccount)
	router.GET(baseURL+"/account/:user_id/balance", wrapper.GetAccountUserIdBalance)
	router.POST(baseURL+"/account/:user_id/deposit", wrapper.PostAccountUserIdDeposit)

}
